@using TodoManagement.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@if (tasks == null)
{
    <p>Loading...</p>
}
else
{
    <div id="tasks-list" class="tasks-list">
        @foreach (var task in tasks)
        {
            <div class="task-card">
                <div class="task-header">
                    <h3 class="task-title">@task.Title</h3>
                    <div class="task-actions">
                            <button class="task-action-btn edit" title="Edit Task" @onclick="@(() => Navigation.NavigateTo($"/Update/{task.Id}"))">

                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="task-action-btn delete" title="Delete Task" @onclick="() => DeleteTask(task.Id)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <p class="task-description">@task.Description</p>
                <div class="task-meta">
                    <span class="task-status">@(task.Status)</span>
                    <span class="task-priority">@(task.Priority)</span>
                    <span class="task-meta-item">
                        <i class="fas fa-calendar-alt"></i>
                        Due: @task.DueDate
                    </span>
                    <span class="task-meta-item">
                        <i class="fas fa-clock"></i>
                        Created: @task.CreatedDate
                    </span>
                </div>
            </div>
        }

    </div>
}

@code {
    private List<TaskModel> tasks;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<TaskModel>>>("https://localhost:44384/api/TodoManagement/GetAll");
        if (response != null && response.Succeeded)
        {
            tasks = response.Data;
        }
    }

    private async Task DeleteTask(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"https://localhost:44384/api/TodoManagement/Delete?Id={id}");
        if (response.IsSuccessStatusCode)
        {
            tasks = tasks.Where(t => t.Id != id).ToList();
        }
        else
        {
            Console.WriteLine("Failed to delete task");
        }
    }

}
